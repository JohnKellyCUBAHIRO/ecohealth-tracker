import { DataE, DataI, HeaterE, HouseT } from "./types";
export default class House {
    private avgEmission;
    private avgEmissionByHouse;
    private emissionFromStudy;
    private data;
    private dataSet;
    /**
     * @warning use the static build method using dataset enum type DataE
     */
    constructor(dataSet: DataE, data: DataI);
    /**
     * Create new instance from dataset
     *
     * @param dataset - the dataset to be used with this calculator
     *
     * @return new House calculator - Throw error if dataset not loaded.
     */
    static build(dataset: DataE): House;
    /**
     * Return constants data loaded
     *
     * @return constant data loaded
     */
    getData: () => DataI;
    /**
     * Return dataset name
     *
     * @return constant dataset loaded
     */
    getDataset: () => DataE;
    /**
     * Compute the co2 emission consumed in kgCO2e from a list of consumed ressources
     * Negative values are allowed (this could be due to energy provider correction)
     *
     * @param  consumptions - list consumptions made in unit depending on heater type
     * @param  heater - type of heater in use
     *
     * @return
     * the real emission consummed from bills consumptions in kgCO2e
     * -1 in case of error (constants not available from dataset)
     */
    getEmissionConsumed: (consumptions: number[], heater: HeaterE) => number;
    /**
     * Compute the CO2 emissions estimation for a house in kgCO2e/year
     *
     * @description
     * We compute here the CO2e emission estimation from heating housing with this simple computation:
     * - Emission = Surface * ConsumptionFactor * CombustibleFactor * ClimateCoef
     * - [kgCO2e/year] = [m²] * [kWh/(m².year)] * [kgCO2e/kW] * Cste
     *
     * If the region or region correction factor is not found - ClimateCoef = 1 is applied.
     *
     * @param house - the house
     *
     * @return
     *   the estimated house emissions in kgCO2e/year
     *   -1 in case of error (constants not available from dataset)
     */
    getEmissionEstimated: (house: HouseT) => number;
    /**
     * Return the total co2 estimation from house/apartment study in kgCO2e/year.
     *
     * @param study - the raw study data
     *
     * @warning
     * Implementation is defined as a lazy singleton that compute only once.
     *
     * @return
     * The estimated co2 emission in kgCO2e/year
     */
    private computeStudy;
    /**
     * Return the average co2 estimation from housing heating in kgCO2e/year (per person).
     *
     * @warning
     * Implementation is defined as a lazy singleton that compute only once.
     *
     * @return
     * The estimated co2 emission in kgCO2e/year (per person)
     */
    getEmissionAvg: () => number;
    /**
     * Return the average co2 estimation from housing heating in kgCO2e/year (per house-apartment).
     *
     * @warning
     * Implementation is defined as a lazy singleton that compute only once.
     *
     * @return
     * The estimated co2 emission in kgCO2e/year (per house-apartment), -1 if information is not available.
     */
    getEmissionAvgByHouse: () => number;
}
/**
 * @TODO Missing trusted Sources & factor coefficients (waiting for it)
 * Compute the co2 emissions reduction from the reduction earned with the work of the house in kgCO2/year
 * Use the emission already computed from house if available, compute first the house emission otherwise.
 *
 * @param house - the house
 * @param works - the type(s) of work(s) made
 *
 * @return
 *   the estimated emissions reduction in kgCO2/year
 *   -1 in case of error (constants not available from dataset)
 */
