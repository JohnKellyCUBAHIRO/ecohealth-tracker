import { AirportsI, DataE, DataI, FlightI } from "./types";
/**
 * Return the available airports
 *
 * @return constant data loaded
 */
export declare const getAirports: () => AirportsI;
/**
 * Compute distance in Km from longitude and lattitude using the haversine formula.
 *
 * @description the law of haversine in brief:
 * Given a unit sphere, a "triangle" on the surface of the sphere is defined by the great circles
 * connecting three points u, v, and w on the sphere.
 * If the lengths of these three sides are a (from u to v), b (from u to w), and c (from v to w),
 * and the angle of the corner opposite c is C, then the law of haversines states:
 *
 * hav(c) = hav(a - b) + sin(a) * sin(b) * hav(C)
 *
 * Since this is a unit sphere, the lengths a, b, and c are simply equal to the angles (in radians)
 * subtended by those sides from the center of the sphere (for a non-unit sphere,
 * each of these arc lengths is equal to its central angle multiplied by the radius R of the sphere).
 *
 * @param fromLat - Lattitude of the point of departure
 * @param fromLon - Longitude of the point of departure
 * @param toLat - Lattitude of the point of arrival
 * @param toLon - Longitude of the point of arrival
 *
 * @return the distance in Km
 */
export declare const getDistance: (fromLat: number, fromLon: number, toLat: number, toLon: number) => number;
export default class Flight {
    private avgEmission;
    private avgEmissionByPassenger;
    private data;
    private dataSet;
    /**
     * @warning use the static build method using dataset enum type DataE
     */
    constructor(dataSet: DataE, data: DataI);
    /**
     * Create a calculator instance from dataset
     *
     * @return new House calculator - Throw error if dataset not loaded.
     */
    static build(dataset: DataE): Flight;
    /**
     * Return the current data constants loaded
     *
     * @return constant data loaded
     */
    getData: () => DataI;
    /**
     * Return the inner data set name
     *
     * @return constant data loaded
     */
    getDataset: () => DataE;
    /**
     * Retrieve the emission factor from the flight distance
     *
     * @param distance - distance of the flight in Km
     *
     * @return emission factor in kgCO2e/peq.km
     */
    getHaulFactor: (distance: number) => number;
    /**
     * Compute the co2 emissions from air travels in kgCO2e/year
     *
     * @description
     * Firstly the distances are calculated between the airports selected, then we
     * use the factor emission expressed in kgCO2e/peq.km (peq = person equivalent) to
     * get our first estimation per equivalent person:
     *
     * - Emission = Distance * Factor
     * - [kgCO2e/year] = [Km/year] * [kgCO2e/km]
     *
     * Finally, we add a factor depending on the class of the seat taken
     * (economy class, business class, first class).
     *
     * @param flight - the flight taken (cf. type)
     * @param nbFlights - the number of flight made a year.
     *
     * @return
     *   the estimated flight emissions for the passengers in kgCO2e
     *   -1 in case of error (e.g. missing IATA airport)
     */
    getEmissionEstimated: (travel: FlightI, nbFlights: number) => number;
    /**
     * Return the average co2 estimation in peq.kgCO2e/year (per person).
     *
     * @description
     * This constant is the ratio totalEmission/#people
     *
     * @return
     * The average co2 emission in peq.kgCO2e/year (per person).
     */
    getEmissionAvg: () => number;
    /**
     * Return the average co2 estimation in peq.kgCO2e/year (per passenger).
     *
     * @description
     * This constant is the ratio totalEmission/#passenger
     *
     * @return
     * The average co2 emission in peq.kgCO2e/year (per passenger).
     */
    getEmissionAvgByPassenger: () => number;
}
